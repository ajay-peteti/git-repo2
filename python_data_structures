Python Data Structures
List
Tuple
Set
Dictionary
a = 10  # Integer
b = 12.2  # Float
print(a)
print(b)
10
12.2
a = True  # Boolean
b = 'Hi'  # String
print(a)
print(b)
True
Hi
List
Lists are ordered sequences that can hold a variety of object types.
They use [] brackets and commas to separate objects in the list.
[1,2,3,4,5]
Lists support indexing and slicing. Lists can be nested and also have a variety of useful methods that can be called off of them.
my_list = [1, 2, 3, 4, 5]
my_list
[1, 2, 3, 4, 5]
type(my_list)
list
my_list[0]
1
my_list[4]
5
my_list[5]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In[31], line 1
----> 1 my_list[5]

IndexError: list index out of range
my_list[-1]
5
my_list[-5]
1
my_list[-6]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
Cell In[37], line 1
----> 1 my_list[-6]

IndexError: list index out of range
new_list = ['A','B','C','D']  # list of strings
new_list
['A', 'B', 'C', 'D']
type(new_list)
list
new_list[0]
'A'
type(new_list[0])
str
len(new_list) # To get the number of items in list
4
len(my_list)
5
list(range(5))
[0, 1, 2, 3, 4]
print(list(range(50)))  # CREATES LIST WITH RANGE OF NUMBERS: 0 T0 49
# print("Range function given numbers from 0 to given_number-1")
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
list(range(20))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
range?
# help(range)
Init signature: range(self, /, *args, **kwargs)
Docstring:     
range(stop) -> range object
range(start, stop[, step]) -> range object

Return an object that produces a sequence of integers from start (inclusive)
to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
These are exactly the valid indices for a list of 4 elements.
When step is given, it specifies the increment (or decrement).
Type:           type
Subclasses:     
my_list
[1, 2, 3, 4, 5]
len(my_list)
5
my_list.append(6)
my_list
[1, 2, 3, 4, 5, 6]
# b.*?
# my_list.*?

# my_list.append --> to add single item at the ending 
# my_list.clear --> to empty list
# my_list.copy --> to copy 
# my_list.count --> to count the number of times item is available in the list
# my_list.extend -> to add multiple item at the ending
# my_list.index --> to get the index of given item | Error when item is not in list
# my_list.insert --> to add item at given index
# my_list.pop --> to remove item from given index | default - removes last item
# my_list.remove --> to remove first occurrence of given item
# my_list.reverse --> to reverse list item
# my_list.sort --> to sort in ascending or descending order | default - ascending
my_list.append??
Signature: my_list.append(object, /)
Docstring: Append object to the end of the list.
Type:      builtin_function_or_method
my_list.pop?
Signature: my_list.pop(index=-1, /)
Docstring:
Remove and return item at index (default last).

Raises IndexError if list is empty or index is out of range.
Type:      builtin_function_or_method
my_list.pop()
6
my_list
[1, 2, 3, 4, 5]
my_list.pop()
5
my_list
[1, 2, 3, 4]
my_list.pop(1)
2
my_list
[1, 3, 4]
my_list.pop(1)
3
my_list
[1, 4]
my_list.pop(-2)
1
my_list
[4]
my_list.pop(0)
4
my_list # Empty list
[]
my_list = list(range(10))   #
my_list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
my_list.clear?
Signature: my_list.clear()
Docstring: Remove all items from list.
Type:      builtin_function_or_method
my_list.clear()
my_list # Empty list
[]
len(my_list)
0
my_list = list(range(15))
my_list # Already in Ascending order
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
my_list.sort?
Signature: my_list.sort(*, key=None, reverse=False)
Docstring:
Sort the list in ascending order and return None.

The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
order of two equal elements is maintained).

If a key function is given, apply it once to each list item and sort them,
ascending or descending, according to their function values.

The reverse flag can be set to sort in descending order.
Type:      builtin_function_or_method
my_list.sort()
my_list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
my_list.sort(reverse=True)
my_list
[14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
my_list[6]
8
my_list[6] = 500
my_list
[14, 13, 12, 11, 10, 9, 500, 7, 6, 5, 4, 3, 2, 1, 0]
my_list.sort() # Ascending order
my_list
[0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 500]
# List items value can be changed -- List is mutable
my_list[7] = 1200
my_list[5] = 800
my_list
[0, 1, 2, 3, 4, 800, 6, 1200, 9, 10, 11, 12, 13, 14, 500]
my_list.sort(reverse=True) # Descending order
my_list
[1200, 800, 500, 14, 13, 12, 11, 10, 9, 6, 4, 3, 2, 1, 0]
